name: Rust Tests

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always
  CI: true

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Install DuckDB (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          wget https://github.com/duckdb/duckdb/releases/download/v1.1.3/libduckdb-linux-amd64.zip
          unzip libduckdb-linux-amd64.zip
          sudo mv libduckdb.so /usr/local/lib/
          sudo ldconfig
          echo "DuckDB installed successfully"

      - name: Install DuckDB (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install duckdb
          echo "DuckDB installed successfully via Homebrew"

      - name: Install DuckDB (Windows)
        if: runner.os == 'Windows'
        run: |
          curl -L -o duckdb.zip https://github.com/duckdb/duckdb/releases/download/v1.1.3/libduckdb-windows-amd64.zip
          unzip duckdb.zip
          mkdir -p C:/duckdb
          mv duckdb.dll C:/duckdb/
          echo "C:/duckdb" >> "$GITHUB_PATH"
          echo "DuckDB installed successfully"
        shell: bash

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: actions/cache@v4
        timeout-minutes: 5
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('rust-toolchain', 'rust-toolchain.toml') || 'stable' }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-

      - name: Show tool versions
        run: |
          rustc --version
          cargo --version
          cargo clippy --version

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Set custom target directory on Windows
        if: runner.os == 'Windows'
        run: |
          echo "CARGO_TARGET_DIR=C:/probe-target" >> "$GITHUB_ENV"
          mkdir -p C:/probe-target
        shell: bash

      - name: Lint with clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Build
        run: cargo build

      - name: Run unit tests
        run: cargo test --lib

      - name: Run integration tests
        run: cargo test --test integration_tests

      - name: Run property tests
        run: cargo test --test property_tests

      - name: Run CLI tests (Sequential on CI)
        run: cargo test --test cli_tests -- --test-threads=1
